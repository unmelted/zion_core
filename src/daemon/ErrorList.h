#ifndef __ERROR_LIST_H__
#define __ERROR_LIST_H__

///////////////////////////////////////////////////////////////////////////////
//
//	ErrorList.h
//
//  4dreplay, Inc. PROPRIETARY INFORMATION.
//  The following contains information proprietary to 4dreplay, Inc. and may not be copied
//  nor disclosed except upon written agreement by 4dreplay, Inc.
//
//  Copyright (C) 2020 4dreplay, Inc. All rights reserved.
//
// @author	Changdo Kim (cdkim@4dreplay.com)
//			, Jinsu Yang (jsyang@4dreplay.com)
//			, Donghyeon Kim (dhkim@4dreplay.com)
// @Date	2021-06-09
//
////////////////////////////////////////////////////////////////////////////////

#include <string>

#define ERROR_LIST_LAST_UPDATE	"2021-06-11"

#define SUCCESS			1000
#define MAX_ERR_COUNT	10000

enum ErrorCodeIndex{
	ERR_INDEX_COMMON	= 0,
	ERR_INDEX_MTD		= 1 * MAX_ERR_COUNT,
	ERR_INDEX_PCD		= 2 * MAX_ERR_COUNT,
	ERR_INDEX_EMD		= 3 * MAX_ERR_COUNT,
	ERR_INDEX_SCD		= 4 * MAX_ERR_COUNT,
	ERR_INDEX_CCD		= 5 * MAX_ERR_COUNT,
	ERR_INDEX_GCD		= 6 * MAX_ERR_COUNT,
	ERR_INDEX_PRESD		= 7 * MAX_ERR_COUNT,
	ERR_INDEX_POSTSD	= 8 * MAX_ERR_COUNT,
};

////////////////////////////////////////////////////////
// Common
enum ErrorCommon {
	COMMON_ERR_NONE = SUCCESS,

	COMMON_ERR_PARSE_FAIL = 1001,

	COMMON_ERR_NOT_FOUND_SEC1,
	COMMON_ERR_NOT_FOUND_SEC2,
	COMMON_ERR_NOT_FOUND_SEC3,
	COMMON_ERR_NOT_FOUND_SENDSTATE,
	COMMON_ERR_NOT_FOUND_TOKEN,
	COMMON_ERR_NOT_FOUND_FROM,
	COMMON_ERR_NOT_FOUND_TO,
	COMMON_ERR_NOT_FOUND_ACTION,

	COMMON_ERR_UNKNOWN_SEC1,
	COMMON_ERR_UNKNOWN_SEC2,
	COMMON_ERR_UNKNOWN_SEC3,
	COMMON_ERR_UNKNOWN_SENDSTATE,
	COMMON_ERR_UNKNOWN_TOKEN,
	COMMON_ERR_UNKNOWN_FROM,
	COMMON_ERR_UNKNOWN_TO,
	COMMON_ERR_UNKNOWN_ACTION,
	COMMON_ERR_UNKNOWN_TYPE,

	COMMON_ERR_TYPE_NAME_STRING,

	COMMON_ERR_END = (ERR_INDEX_COMMON + MAX_ERR_COUNT),
};

////////////////////////////////////////////////////////
// MTd
enum ErrorMTd {
	MTD_ERR_START = ERR_INDEX_MTD,
	///////////////////////////////////

	MTD_ERR_DAEMON_NOT_CONNECTED,
	MTD_ERR_APP_NOT_CONNECTED,

	MTD_ERR_NOT_FOUND_DAEMONLIST,

	///////////////////////////////////
	MTD_ERR_END = (MTD_ERR_START + MAX_ERR_COUNT),
};

////////////////////////////////////////////////////////
// PCd
enum ErrorPCd {
	PCD_ERR_START = ERR_INDEX_PCD,
	///////////////////////////////////

	// Not Found
	PCD_ERR_NOT_FOUND_ADJUSTID,
	
	PCD_ERR_NOT_CONNECTED_PRESD,
	PCD_ERR_NOT_CONNECTED_POSTSD,
	PCD_ERR_NOT_CONNECTED_VPD,

	PCD_ERR_INVALID_VPD_INFO,

	PCD_ERR_PRESD_LOOPBACK_ADDR,
	PCD_ERR_POSTSD_LOOPBACK_ADDR,
	PCD_ERR_VPD_LOOPBACK_ADDR,

	PCD_ERR_PRESD_COUNT_ZERO,
	PCD_ERR_PRESD_ASSIGNED_VPD_COUNT,

	///////////////////////////////////
	PCD_ERR_END = (PCD_ERR_START + MAX_ERR_COUNT),
};

////////////////////////////////////////////////////////
// EMd
enum ErrorEMd {
	EMD_ERR_START = ERR_INDEX_EMD,
	///////////////////////////////////

	// Not Found
	EMD_ERR_NOT_FOUND_IPARR,
	EMD_ERR_NOT_FOUND_IPARR_IP,
	EMD_ERR_NOT_FOUND_IPARR_INDEX,
	EMD_ERR_NOT_FOUND_IPARR_TYPE,
	EMD_ERR_NOT_FOUND_RECORD,
	EMD_ERR_NOT_FOUND_DELLIST,
	EMD_ERR_NOT_FOUND_CALID,
	EMD_ERR_NOT_FOUND_CALDATA,
	EMD_ERR_NOT_FOUND_DELCALID,
	EMD_ERR_NOT_FOUND_TYPE,
	EMD_ERR_NOT_FOUND_DATA,
	EMD_ERR_NOT_FOUND_MOVIE,
	EMD_ERR_NOT_FOUND_MOVIEARR,

	// Empty
	EMD_ERR_EMPTY_IPARR,
	EMD_ERR_EMPTY_MOVIEARR,

	// Type
	EMD_ERR_TYPE_IPARR_IP,
	EMD_ERR_TYPE_IPARR_INDEX,
	EMD_ERR_TYPE_IPARR_TYPE,
	EMD_ERR_TYPE_IPARR_GCDID,
	EMD_ERR_TYPE_IPARR_SCDID,
	EMD_ERR_TYPE_IPARR_VPDID,
	EMD_ERR_TYPE_IPARR_PRESDID,
	EMD_ERR_TYPE_IPARR_POSTSDID,
	EMD_ERR_TYPE_IPARR_SWITCHPORT,
	EMD_ERR_TYPE_IPARR_PRESDPATH,
	EMD_ERR_TYPE_IPARR_POSTSDPATH,
	EMD_ERR_TYPE_RECORD_NAME,
	EMD_ERR_TYPE_RECORD_CALID,
	EMD_ERR_TYPE_DELLIST,
	EMD_ERR_TYPE_DELLIST_VALUE,
	EMD_ERR_TYPE_CALID,
	EMD_ERR_TYPE_CALDATA_SUMMARY_NAME,
	EMD_ERR_TYPE_CALDATA_SUMMARY_COMMENT,
	EMD_ERR_TYPE_CALDATA_SUMMARY_PTSTYPE,
	EMD_ERR_TYPE_CALDATA_SUMMARY_WIDTH,
	EMD_ERR_TYPE_CALDATA_SUMMARY_HEIGHT,
	EMD_ERR_TYPE_CALDATA_SUMMARY_STADIUM,
	EMD_ERR_TYPE_CALDATA_SUMMARY_WORLDCOORDS,
	EMD_ERR_TYPE_CALDATA_PTSLIST,
	EMD_ERR_TYPE_CALDATA_PTSLIST_DSCID,
	EMD_ERR_TYPE_CALDATA_PTSLIST_PTS,
	EMD_ERR_TYPE_CALDATA_PTSLIST_IMAGE,
	EMD_ERR_TYPE_DELCALID,
	EMD_ERR_TYPE_DELCALID_VALUE,
	EMD_ERR_TYPE_TYPE,
	EMD_ERR_TYPE_DATA,
	EMD_ERR_TYPE_MOVIE_NAME,
	EMD_ERR_TYPE_MOVIE_SAVEPATH,
	EMD_ERR_TYPE_MOVIE_RECORDNAME,
	EMD_ERR_TYPE_MOVIE_USESDI,
	EMD_ERR_TYPE_MOVIE_DURATION,
	EMD_ERR_TYPE_MOVIE_STATUS,
	EMD_ERR_TYPE_MOVIEARR,

	// Value
	EMD_ERR_INVALID_RECORD_NAME,
	EMD_ERR_INVALID_RECORD_CALID,
	EMD_ERR_INVALID_CALID,

	// DB
	EMD_ERR_DB_OPEN,
	EMD_ERR_DB_SELECT,
	EMD_ERR_DB_EXECUTE,
	EMD_ERR_DB_RESULT,
	EMD_ERR_DB_NOT_EXIST_GCD,
	EMD_ERR_DB_NOT_EXIST_POSTSD,
	EMD_ERR_DB_NOT_EXIST_PRESD,
	EMD_ERR_DB_NOT_EXIST_SCD,
	EMD_ERR_DB_NOT_EXIST_REPLAYMOVIE,
	EMD_ERR_DB_NOT_EXIST_VPD,

	///////////////////////////////////
	EMD_ERR_END = (ERR_INDEX_EMD + MAX_ERR_COUNT),
};

////////////////////////////////////////////////////////
// SCd
enum ErrorSCd {
	SCD_ERR_START = ERR_INDEX_SCD,
	///////////////////////////////////

	// Not Found
	SCD_ERR_NOT_FOUND_SWITCHARRAY,

	// Telnet
	SCD_ERR_TELNET_CONNECT,
	SCD_ERR_TELNET_LOGIN,
	SCD_ERR_TELNET_ID,
	SCD_ERR_TELNET_PASSWORD,
	SCD_ERR_TELNET_PRIVILEGE,
	SCD_ERR_TELNET_CONFIG,
	SCD_ERR_TELNET_POEOFF,
	SCD_ERR_TELNET_POEON,
	SCD_ERR_TELNET_GETMAC,
	SCD_ERR_TELNET_CLEAR,
	SCD_ERR_TELNET_FINDPOWER,
	SCD_ERR_TELNET_SHOW_MACADDRESS,
	SCD_ERR_TELNET_SHOWPORT,
	SCD_ERR_TELNET_FIND_PORTNUM,
	SCD_ERR_TELNET_SET_RANGE,
	SCD_ERR_TELNET_COPY_CONFIG,
	SCD_ERR_TELNET_RELOAD,
	SCD_ERR_TELNET_STATE_AGREEMENT,
	SCD_ERR_TELNET_NEGOTIATE,
	SCD_ERR_TELNET_GET_SWITCH_MODEL,
	// Switch
	SCD_ERR_SWITCH_MODEL,
	SCD_ERR_SWITCH_COMMAND,
	SCD_ERR_NOT_MATCH_IPARRAY,
	// Ping
	SCD_ERR_PING_CHECK_ERR,

	SCD_SWITCHARRAY_SIZE_ZERO,
	SCD_ERR_TELNET_END,
	///////////////////////////////////
	SCD_ERR_END = (ERR_INDEX_SCD + MAX_ERR_COUNT),
};

////////////////////////////////////////////////////////
// CCd
enum ErrorCCd {
	CCD_ERR_START = ERR_INDEX_CCD,
	///////////////////////////////////

	CCD_ERR_NOT_FOUND_CAMERAS,
	CCD_ERR_NOT_FOUND_IPADDR,
	CCD_ERR_NOT_FOUND_TYPE,
	CCD_ERR_NOT_FOUND_STATUS,
	CCD_ERR_NOT_FOUND_DELAY_IP,
	CCD_ERR_NOT_FOUND_DELAY_DELAY,
	CCD_ERR_NOT_FOUND_CAMERA_MODEL,
	CCD_ERR_NOT_FOUND_FIRMWARE_DIR,
	CCD_ERR_NOT_FOUND_FIRMWARE_VERSION,
	CCD_ERR_NOT_FOUND_PRESET,

	CCD_ERR_TYPE_CAMERAS,
	CCD_ERR_TYPE_CAMERAS_VALUE,
	CCD_ERR_TYPE_CAMERAS_TYPE,
	CCD_ERR_TYPE_STATUS,
	CCD_ERR_TYPE_IPADDR,
	CCD_ERR_TYPE_CAMERA_CONFIG_INFO,
	CCD_ERR_TYPE_TIME,
	CCD_ERR_TYPE_SYNCTIME,
	CCD_ERR_TYPE_SYNCLIMIT,
	CCD_ERR_TYPE_SYNCSKIP,
	CCD_ERR_TYPE_ACTIVE,
	CCD_ERR_TYPE_DELAY,
	CCD_ERR_TYPE_DELAY_VALUE,
	CCD_ERR_TYPE_DELAY_IP,
	CCD_ERR_TYPE_DELAY_DELAY,
	CCD_ERR_TYPE_FIRMWARE_VERSION,
	CCS_ERR_TYPE_PRESET,

	CCD_ERR_EMPTY_CAMERAS,
	CCD_ERR_EMPTY_ACTIVE,
	CCD_ERR_EMPTY_CAMERA_MODEL,
	CCD_ERR_EMPTY_FIRMWARE_VERSION,

	CCD_ERR_INVALID_CAMERA_CONFIG_INFO,
	CDD_ERR_INVALID_CAMERA_MODEL,

	CCD_ERR_CREATE_PRESET_DIR,
	CCD_ERR_WRITE_PRESET_FILE,
	CCD_ERR_NO_PRESET_FILE,

	///////////////////////////////////
	CCD_ERR_END = (CCD_ERR_START + MAX_ERR_COUNT),
};

////////////////////////////////////////////////////////
// GCd
enum ErrorGCd {
	GCD_ERR_START = ERR_INDEX_GCD,
	///////////////////////////////////

	GCD_ERR_NOT_FOUND_GIMBALS,
	GCD_ERR_TYPE_GIMBALS,
	GCD_ERR_TYPE_GIMBALS_VALUE,
	GCD_ERR_MISMATCH_MSG_CMD,
	GCD_ERR_NOT_FOUND_PRESETNUM,
	GCD_ERR_INVALID_PRESETNUM,

	///////////////////////////////////
	GCD_ERR_END = (GCD_ERR_START + MAX_ERR_COUNT),
};

////////////////////////////////////////////////////////
// PreSd
enum ErrorPreSd {
	PRESD_ERR_START = ERR_INDEX_PRESD,
	///////////////////////////////////

	PRESD_ERR_NOT_FOUND_RECORDNAME,
	PRESD_ERR_NOT_FOUND_TIME,
	PRESD_ERR_NOT_FOUND_PRESD_IP,
	PRESD_ERR_NOT_FOUND_PRESD_RUN,
	PRESD_ERR_MISMATCH_RECORDNAME,

	PRESD_ERR_OPENSESSION,
	PRESD_ERR_CLOSESESSION,
	PRESD_ERR_PREPARE,

	PRESD_ERR_NOT_CONNECTED,
	PRESD_ERR_NOT_PREPARED,

	PRESD_ERR_NOW_PREPARING,
	PRESD_ERR_NOW_STREAMING,

	PRESD_ERR_INVALID_GOP,
	PRESD_ERR_INVALID_CAMERA_POSTSDIP,
	PRESD_ERR_EMPTY_SAVEPATH,
	PRESD_ERR_EMPTY_RECORDNAME,
	PRESD_ERR_START_AGENT,

	PRESD_ERR_MISMATCH_IPADDRESS,

	///////////////////////////////////
	PRESD_ERR_END = (PRESD_ERR_START + MAX_ERR_COUNT),
};

////////////////////////////////////////////////////////
// PostSd
enum ErrorPostSd {
	POSTSD_ERR_START = ERR_INDEX_POSTSD,
	///////////////////////////////////

	POSTSD_ERR_NOT_FOUND_LIVEINFO,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_LIVE,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_METHOD,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_RECORD,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_GROUPS,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_GROUPID,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_MULTIVIEW,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_VIDEO,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_RESOLW,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_RESOLH,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_FRAMERATE,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_BITRATE,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_GOP,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_CODEC,
	POSTSD_ERR_NOT_FOUND_LIVESERVERINFO,
	POSTSD_ERR_NOT_FOUND_RECORDINFO,
	POSTSD_ERR_NOT_FOUND_CAMERAS,
	POSTSD_ERR_NOT_FOUND_POSITION_SWIPE,
	POSTSD_ERR_NOT_FOUND_POSITION_SWIPE_LENGTH,
	POSTSD_ERR_NOT_FOUND_POSITION_SWIPE_DATA,
	POSTSD_ERR_NOT_FOUND_POSITION_SWIPE_CHANNEL,
	POSTSD_ERR_NOT_FOUND_MULTIVIEW_ROI,
	POSTSD_ERR_NOT_FOUND_MULTIVIEW_ROI_CHANNEL,
	POSTSD_ERR_NOT_FOUND_MULTIVIEW_ROI_LENGTH,
	POSTSD_ERR_NOT_FOUND_MULTIVIEW_ROI_DATA,
	POSTSD_ERR_NOT_FOUND_TIME,
	POSTSD_ERR_NOT_FOUND_POSTSD_IP,
	POSTSD_ERR_NOT_FOUND_POSTSD_RUN,

	POSTSD_ERR_TYPE_LIVEINFO_GROUPS,
	POSTSD_ERR_TYPE_POSITION_SWIPE,
	POSTSD_ERR_TYPE_POSITION_SWIPE_CHANNEL,
	POSTSD_ERR_TYPE_MULTIVIEW_ROI,

	POSTSD_ERR_CONNECT_FAIL,
	POSTSD_ERR_PREPARE_FAIL,

	POSTSD_ERR_CONFIG_LIVE_ENABLE,
	POSTSD_ERR_CONFIG_RECORD_ENABLE,

	POSTSD_ERR_AVCONTROL_TIME,
	POSTSD_ERR_AVCONTROL_STATUS,

	POSTSD_ERR_NOT_FOUND_LIVEINFO_AR_FEATURE,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_AV_SYNCTIME,

	POSTSD_ERR_NOT_FOUND_LIVEINFO_CHANNEL,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_SAMPLEBIT,
	POSTSD_ERR_NOT_FOUND_LIVEINFO_SAMPLERATE,	
	POSTSD_ERR_NOT_FOUND_LIVEINFO_AUDIOCODEC,
	POSTSD_ERR_NOT_FOUND_LIVESERVERINFO_MEDIA,

	POSTSD_ERR_NOT_FOUND_SYNCCONTROL_LIVEINDEX,
	POSTSD_ERR_NOT_FOUND_SYNCCONTROL_LIVE,
	POSTSD_ERR_NOT_FOUND_SYNCCONTROL_CONTROLTIME,
	POSTSD_ERR_CONTROLTIME_APPLY_FAIL,
	POSTSD_ERR_CONTROLTIME_OUTOFRANGE,

	///////////////////////////////////
	POSTSD_ERR_END = (POSTSD_ERR_START + MAX_ERR_COUNT),
};

std::string GetErrorCodeToString(const int nErrorCode);

#endif // __ERROR_LIST_H__
